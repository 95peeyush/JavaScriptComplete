What is JS?
    1.JS is High level,Object Oriented,Multi paradigm programming language.
    2.Programming Language means anything that can give instruction to computer to perform certain task.
    3.High Level means we don't have to worry about complex stuff like memory management.
    4.Object Oriented means based on objects.

What it does?
    1.Js add dynamic functionality to the website.

History
    1.ES5 then came ES6(ES2015) with biggest changes to language ever.
    2.Then after that every year a new version of JS is being launched with some new feature.
    3.JS from 2015 onwards is also called Modern JS.

Variables and Values
    1.Values are most fundamentals unit of information in programming language.
    2.We can store them in Variables to re-ues them.
    3.Not allowed to use reserved keywords as Variables name.
    4.One exception here (3rd point) name is a reserved keywords but still we can use that as a Variables name so it is recommended to not to use that.
    5.Can't redeclare a variable.
    6.constants are named in all capital.
    7.Every Value in JS is either a object or primitive type value.

Note->For writing errors to console we don't need console.log() it will get print directly.  

Data Types
    1.Number let age=23
    2.String let firstName="Peeyush"
    3.undefined let children;
    4.null similar to undefined
    5.boolean let isAble =true;(only true / false);
    6.symbols(unique that doesn't get changed)
    7.bigInt(introducted inm ES2020)

Note-> JS is dynamically typed language that means we don't specify the type of value it holds rather it is decided automatically depending on the value.
In other words it's value that has type not the variable.

Let,var and const
    1.let and const are part of modern js(es2015)
    2.const are the one which can't be changes or left undefined
    3.var is similar to let but let is block scoped and var is function scoped.

Operators
    1.Math Operators(+,_,*,/,%,**(power))
    2.Comparison Operators(>,<,>=,<=,==,===)
    3.Assignment Operators(=)
    4.typeof Operator

String and Template Literals
    1.From ES6 onwards we have template Literals to manage the complex strings formation.

Type Conversion and Coercion 
    1.Type conversion is when we manually convert one type of value to another.
    2.We can convert number,strings,boolean only.
    3.Type Coercion is automatic conversion of types of value.
    4.Template Literals is an example of automatic conversion.
    5.when we use ('+') to add number and string then number gets converted to string.
   Type Conversion
    1.'+' converts the numbers to string when we have one or more number and atleast one string
    2.'-,*,/' converts string to number. when we have one of more string and atleast one number

Truthy and Falsy Values
    1.Truthy values are the one which will become true when converted to boolean.
    2.Falsy values are the one which will become false when converted to boolean.
    3.There are 5 Falsy Values - > null,undefined,0,'',NaN
    4.Rest all are true.

Equality Operators 
    1.Two types of Equality (== & ===) loose Equality and strict Equality.
    2.Loose(==) Equality perform type Coercion and hence doesn't check for type of value.
    3.Strict(===) Equality doesn't perform type Coercion and hence check for type of value also.

Switch case
    1.Alternative of if-else statement.
    2.strict checking is done.
    3.one case can have multiple statement without needing the {} block.
    4.need to use break after every case otherwise all the line with be executed after that line.

Strict mode
    1.enabling strict mode helps us prevents bugs in the code.
    2.it also hold the list of words that might become reserve in future.

Function
    1.Most fundamental unit of JS.
    2.Re-use the code many times.
    3.if can accept the data and can return the data also.
    4.Function declaration and function expression are two different ways of defining the function in JS.

Arrays
    1.Can store different data also.
    2.we can insert the expression also as it will be calculated first and then it will be inserted.
    3.two ways to create array using ([] and new Array());

Objects
    1.In objects we can define the property with key-value pair.
    2.So it becomes easy to access them as compare to array(in JS) are we need to remember the order in which elements are inserted.

Dot vs Bracket Notation
    1.Major Difference is we can pass the expression in the Bracket notation but can't pass that in dot notation.

Note-> Arrays are also object but some special type of objects.

